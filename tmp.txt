-- SKBUILD = 
-- SCALUQ_USE_TEST = ON
-- Setting default Kokkos CXX standard to 17
-- Kokkos version: 4.2.0
-- The project name is: Kokkos
-- Using internal gtest for testing
-- Compiler Version: 12.6.85
-- kokkos_launch_compiler (/workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler) is enabled...
-- Using -std=c++17 for C++17 standard as feature
-- Built-in Execution Spaces:
--     Device Parallel: Kokkos::Cuda
--     Host Parallel: Kokkos::OpenMP
--       Host Serial: SERIAL
-- 
-- Architectures:
--  AMPERE86
-- Using internal desul_atomics copy
-- Kokkos Devices: OPENMP;CUDA;SERIAL, Kokkos Backends: OPENMP;CUDA;SERIAL
-- 
-- Configured Eigen 3.4.90
-- 
-- Using the multi-header code from /workspaces/scaluq/build/_deps/json-src/include/
-- Configuring done (0.6s)
-- Generating done (0.0s)
-- Build files have been written to: /workspaces/scaluq/build
ninja: Entering directory `build'
[1/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/param_gate.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/param_gate.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/param_gate.cpp.o -c /workspaces/scaluq/src/gate/param_gate.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[2/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate.cpp.o -c /workspaces/scaluq/src/gate/gate.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[3/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/param_gate_standard.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/param_gate_standard.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/param_gate_standard.cpp.o -c /workspaces/scaluq/src/gate/param_gate_standard.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 780 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init2<T0,T1>(Eigen::Index, Eigen::Index, std::enable_if_t<<expression>, T0> *) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T0=int, T1=int]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T0 &, const T1 &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T0=int, T1=int]" at line 10 of /workspaces/scaluq/src/gate/param_gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamRXGateImpl<Fp>::get_matrix(Fp) const [with Fp=double]" at line 33 of /workspaces/scaluq/src/gate/param_gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 780 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init2<T0,T1>(Eigen::Index, Eigen::Index, std::enable_if_t<<expression>, T0> *) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T0=int, T1=int]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T0 &, const T1 &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T0=int, T1=int]" at line 10 of /workspaces/scaluq/src/gate/param_gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamRXGateImpl<Fp>::get_matrix(Fp) const [with Fp=float]" at line 33 of /workspaces/scaluq/src/gate/param_gate_standard.cpp

[4/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/param_gate_pauli.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/param_gate_pauli.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/param_gate_pauli.cpp.o -c /workspaces/scaluq/src/gate/param_gate_pauli.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, T1=std::complex<double>, T2=std::complex<double>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, T1=std::complex<float>, T2=std::complex<float>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 15 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::ParamPauliRotationGateImpl<Fp>::get_matrix(Fp) const [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/param_gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[5/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o -MF CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o.d -o CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o -c /workspaces/scaluq/src/circuit/circuit.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[6/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate_pauli.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate_pauli.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate_pauli.cpp.o -c /workspaces/scaluq/src/gate/gate_pauli.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, T1=std::complex<double>, T2=std::complex<double>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, T1=std::complex<float>, T2=std::complex<float>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Rhs=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 903 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with BinaryOp=Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Rhs=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 6 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 38 of /workspaces/scaluq/src/gate/gate_pauli.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::PauliRotationGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 66 of /workspaces/scaluq/src/gate/gate_pauli.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[7/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/update_ops_dense_matrix.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/update_ops_dense_matrix.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/update_ops_dense_matrix.cpp.o -c /workspaces/scaluq/src/gate/update_ops_dense_matrix.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[8/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate_standard.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate_standard.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate_standard.cpp.o -c /workspaces/scaluq/src/gate/gate_standard.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 565 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 565 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=double]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 565 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=Eigen::Index]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=Eigen::Index]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 565 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 9 of /workspaces/scaluq/src/gate/gate_standard.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::IGateImpl<Fp>::get_matrix() const [with Fp=float]" at line 26 of /workspaces/scaluq/src/gate/gate_standard.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_divide_fast<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_divide_fast<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[9/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o -c /workspaces/scaluq/src/gate/gate_probablistic.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[10/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o -c /workspaces/scaluq/src/gate/param_gate_probablistic.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[11/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/merge_gate.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/merge_gate.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/merge_gate.cpp.o -c /workspaces/scaluq/src/gate/merge_gate.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 122 of /workspaces/scaluq/include/scaluq/gate/../util/utility.hpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::get_expanded_matrix(const scaluq::internal::ComplexMatrix<Fp> &, const std::vector<size_t, std::allocator<std::_Bit_type>> &, uint64_t, std::vector<size_t, std::allocator<std::_Bit_type>> &) [with Fp=float]" at line 18 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 122 of /workspaces/scaluq/include/scaluq/gate/../util/utility.hpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::get_expanded_matrix(const scaluq::internal::ComplexMatrix<Fp> &, const std::vector<size_t, std::allocator<std::_Bit_type>> &, uint64_t, std::vector<size_t, std::allocator<std::_Bit_type>> &) [with Fp=float]" at line 18 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, true>>, const Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, -1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, ProductTag=3]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 0, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 0, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 0, -1, -1>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1>>, Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 8 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, true>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, true>]" at line 106
            [ 20 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, -1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, true>>, Rhs=const Eigen::Block<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, -1, 1, false>]" at line 895
            [ 17 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=float]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 122 of /workspaces/scaluq/include/scaluq/gate/../util/utility.hpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::get_expanded_matrix(const scaluq::internal::ComplexMatrix<Fp> &, const std::vector<size_t, std::allocator<std::_Bit_type>> &, uint64_t, std::vector<size_t, std::allocator<std::_Bit_type>> &) [with Fp=double]" at line 18 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 122 of /workspaces/scaluq/include/scaluq/gate/../util/utility.hpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::get_expanded_matrix(const scaluq::internal::ComplexMatrix<Fp> &, const std::vector<size_t, std::allocator<std::_Bit_type>> &, uint64_t, std::vector<size_t, std::allocator<std::_Bit_type>> &) [with Fp=double]" at line 18 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, true>>, const Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, -1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, ProductTag=3]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 0, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 0, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 0, -1, -1>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1>>, Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 8 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, true>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, true>]" at line 106
            [ 20 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, -1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, true>>, Rhs=const Eigen::Block<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, -1, 1, false>]" at line 895
            [ 17 instantiation contexts not shown ]
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=0, MaxRows_=-1, MaxCols_=-1, T=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 223 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/IO.h
            instantiation of "std::ostream &Eigen::operator<<(std::ostream &, const Eigen::DenseBase<Derived> &) [with Derived=Eigen::Product<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0>]" at line 26 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate_dense_matrix(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 53 of /workspaces/scaluq/src/gate/merge_gate.cpp
            instantiation of "std::pair<scaluq::Gate<Fp>, Fp> scaluq::merge_gate(const scaluq::Gate<Fp> &, const scaluq::Gate<Fp> &) [with Fp=double]" at line 246 of /workspaces/scaluq/src/gate/merge_gate.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[12/67] cd /workspaces/scaluq/build/_deps/kokkos-build && /opt/cmake-3.28.0/bin/cmake -DRUN_CHECK_GIT_VERSION=1 -DKOKKOS_SOURCE_DIR=/workspaces/scaluq/build/_deps/kokkos-src -P /workspaces/scaluq/build/_deps/kokkos-src/cmake/build_env_info.cmake
-- Configured git information in /workspaces/scaluq/build/_deps/kokkos-build/generated/Kokkos_Version_Info.cpp
[13/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate_matrix.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate_matrix.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate_matrix.cpp.o -c /workspaces/scaluq/src/gate/gate_matrix.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, T1=std::complex<float>, T2=std::complex<float>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 20 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1940): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>(numext::real(x), -numext::imag(x));
      ^
          detected during:
            instantiation of "std::complex<T> Eigen::internal::conj_impl<std::complex<T>, true>::run(const std::complex<T> &) [with T=float]" at line 1084
            instantiation of "Eigen::internal::conj_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::conj(const Scalar &) [with Scalar=std::complex<float>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/UnaryFunctors.h
            instantiation of "const Scalar Eigen::internal::scalar_conjugate_op<Scalar>::operator()(const Scalar &) const [with Scalar=std::complex<float>]" at line 529 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with UnaryOp=Eigen::internal::scalar_conjugate_op<std::complex<float>>, ArgType=Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>>, Functor=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 5 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<float>>, Eigen::Transpose<const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 20 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/InverseImpl.h(245): warning #20013-D: calling a constexpr __host__ function("plain_enum_min") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      const int Size = plain_enum_min(XprType::ColsAtCompileTime, DstXprType::ColsAtCompileTime);
                       ^
          detected during:
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<XprType>, Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<XprType>, Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, XprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at<Base>(this, expr.data(), rows, cols);
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Map<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Map<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 393 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at(&m_stride, (StrideType::OuterStrideAtCompileTime == 0) ? 0 : outer_stride,
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Map<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Map<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 393 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>]" at line 550
            instantiation of "Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::Data::Data(const Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::XprType &) [with UnaryOp=Eigen::internal::scalar_score_coeff_op<std::complex<float>>, ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>]" at line 521
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, SrcXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, Functor=Eigen::internal::swap_assign_op<std::complex<float>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, SrcXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, Functor=Eigen::internal::swap_assign_op<std::complex<float>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 13 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 492 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::product_evaluator(const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::XprType &) [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, ProductTag=4]" at line 35 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::Product<Lhs, Rhs, Options>>::evaluator(const Eigen::internal::evaluator<Eigen::Product<Lhs, Rhs, Options>>::XprType &) [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, Options=1]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=-1, InnerPanel=false]" at line 732 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, SrcXprType=Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, SrcXprType=Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 15 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>>, const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, ProductTag=4]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, 1, 0, 1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>]" at line 106
            [ 29 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, 1, 1, 1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>>, Rhs=const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>]" at line 895
            [ 26 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1111
            instantiation of "Eigen::internal::evaluator<Eigen::Ref<PlainObjectType, RefOptions, StrideType>>::evaluator(const Eigen::internal::evaluator<Eigen::Ref<PlainObjectType, RefOptions, StrideType>>::XprType &) [with PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, RefOptions=0, StrideType=Eigen::OuterStride<-1>]" at line 303 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseCoeffsBase.h
            instantiation of "Eigen::DenseCoeffsBase<Derived, 1>::Scalar &Eigen::DenseCoeffsBase<Derived, 1>::coeffRef(Eigen::Index, Eigen::Index) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseCoeffsBase.h
            instantiation of "Eigen::DenseCoeffsBase<Derived, 1>::Scalar &Eigen::DenseCoeffsBase<Derived, 1>::operator()(Eigen::Index, Eigen::Index) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 370 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::unblocked_lu(Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::MatrixTypeRef &, PivIndex *, PivIndex &) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 399 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 9 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at<Base>(this, expr.data(), rows, cols);
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 422 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at(&m_stride, (StrideType::OuterStrideAtCompileTime == 0) ? 0 : outer_stride,
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 422 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Rhs=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Side=1, Mode=5]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Mode_=5U, Side=1, OtherDerived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Mode_=5U, OtherDerived=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 448 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<float>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 7 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>>, const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Rhs=Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, ProductTag=3]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Eigen::internal::sub_assign_op<std::complex<float>, std::complex<float>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 16 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>]" at line 106
            [ 28 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>>, Rhs=const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>]" at line 895
            [ 25 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20013-D: calling a constexpr __host__ function("cols") from a __host__ __device__ function("rows") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_xpr.cols(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Inverse<XprType>::rows() const noexcept [with XprType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>]" at line 539 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex=Eigen::DefaultPermutationIndex]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 5 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20013-D: calling a constexpr __host__ function("rows") from a __host__ __device__ function("cols") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index cols() const noexcept { return m_xpr.rows(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Inverse<XprType>::cols() const noexcept [with XprType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>]" at line 539 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, MatrixType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex=Eigen::DefaultPermutationIndex]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 5 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20013-D: calling a constexpr __host__ function("cols") from a __host__ __device__ function("rows") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_dec.cols(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Solve<Decomposition, RhsType>::rows() const noexcept [with Decomposition=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 129
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Scalar=std::complex<float>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<float>, std::complex<float>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 11 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<float>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, false>, SrcXprType=Eigen::Block<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, false>, Functor=Eigen::internal::swap_assign_op<std::complex<float>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, false>, SrcXprType=Eigen::Block<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, 1, -1, false>, Functor=Eigen::internal::swap_assign_op<std::complex<float>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 27 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=long]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=long]" at line 1204 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1253 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::linear_coeff_impl(Eigen::Index, Eigen::internal::false_type) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1208 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            [ 33 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<float>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<float>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, IndexType=long]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<float>>, PlainObjectType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, IndexType=long]" at line 1204 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1253 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::linear_coeff_impl(Eigen::Index, Eigen::internal::false_type) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1208 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            [ 33 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Side=1, Mode=5]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Mode_=5U, Side=1, OtherDerived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Mode_=5U, OtherDerived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 230 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::_solve_impl(const RhsType &, DstType &) const [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, DstType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Scalar=std::complex<float>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 14 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Side=1, Mode=2]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Mode_=2U, Side=1, OtherDerived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Mode_=2U, OtherDerived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 233 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::_solve_impl(const RhsType &, DstType &) const [with MatrixType_=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, DstType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<float>>, Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, Scalar=std::complex<float>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 14 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 715 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::resize_if_allowed(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<T1, T2> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, SrcXprType=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, T1=std::complex<double>, T2=std::complex<double>]" at line 730 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 20 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1940): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>(numext::real(x), -numext::imag(x));
      ^
          detected during:
            instantiation of "std::complex<T> Eigen::internal::conj_impl<std::complex<T>, true>::run(const std::complex<T> &) [with T=double]" at line 1084
            instantiation of "Eigen::internal::conj_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::conj(const Scalar &) [with Scalar=std::complex<double>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/UnaryFunctors.h
            instantiation of "const Scalar Eigen::internal::scalar_conjugate_op<Scalar>::operator()(const Scalar &) const [with Scalar=std::complex<double>]" at line 529 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with UnaryOp=Eigen::internal::scalar_conjugate_op<std::complex<double>>, ArgType=Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>>, Functor=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 5 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 224 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> &Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::operator=(const Eigen::DenseBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseUnaryOp<Eigen::internal::scalar_conjugate_op<std::complex<double>>, Eigen::Transpose<const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 20 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/InverseImpl.h(245): warning #20013-D: calling a constexpr __host__ function("plain_enum_min") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      const int Size = plain_enum_min(XprType::ColsAtCompileTime, DstXprType::ColsAtCompileTime);
                       ^
          detected during:
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<XprType>, Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<XprType>, Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, XprType::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, XprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 771 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at<Base>(this, expr.data(), rows, cols);
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 393 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at(&m_stride, (StrideType::OuterStrideAtCompileTime == 0) ? 0 : outer_stride,
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::Stride<-1, 0>>]" at line 393 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>]" at line 550
            instantiation of "Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::Data::Data(const Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::XprType &) [with UnaryOp=Eigen::internal::scalar_score_coeff_op<std::complex<double>>, ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>]" at line 521
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, SrcXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, Functor=Eigen::internal::swap_assign_op<std::complex<double>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, SrcXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, Functor=Eigen::internal::swap_assign_op<std::complex<double>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 13 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 492 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::product_evaluator(const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::XprType &) [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, ProductTag=4]" at line 35 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::Product<Lhs, Rhs, Options>>::evaluator(const Eigen::internal::evaluator<Eigen::Product<Lhs, Rhs, Options>>::XprType &) [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, Options=1]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=-1, InnerPanel=false]" at line 732 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, SrcXprType=Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>, SrcXprType=Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 15 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>>, const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Rhs=Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, ProductTag=4]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1>>, Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 17 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, 1, 0, 1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>]" at line 106
            [ 29 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, 1, 1, 1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, BlockRows=1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, -1, 1, false>, 1, 1, false>>, Rhs=const Eigen::Block<const Eigen::Block<Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, 1, -1, false>, 1, 1, false>]" at line 895
            [ 26 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1111
            instantiation of "Eigen::internal::evaluator<Eigen::Ref<PlainObjectType, RefOptions, StrideType>>::evaluator(const Eigen::internal::evaluator<Eigen::Ref<PlainObjectType, RefOptions, StrideType>>::XprType &) [with PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, RefOptions=0, StrideType=Eigen::OuterStride<-1>]" at line 303 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseCoeffsBase.h
            instantiation of "Eigen::DenseCoeffsBase<Derived, 1>::Scalar &Eigen::DenseCoeffsBase<Derived, 1>::coeffRef(Eigen::Index, Eigen::Index) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseCoeffsBase.h
            instantiation of "Eigen::DenseCoeffsBase<Derived, 1>::Scalar &Eigen::DenseCoeffsBase<Derived, 1>::operator()(Eigen::Index, Eigen::Index) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 370 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::unblocked_lu(Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::MatrixTypeRef &, PivIndex *, PivIndex &) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 399 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 9 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at<Base>(this, expr.data(), rows, cols);
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 422 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("construct_at") from a __host__ __device__ function("construct") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      internal::construct_at(&m_stride, (StrideType::OuterStrideAtCompileTime == 0) ? 0 : outer_stride,
      ^
          detected during:
            instantiation of "__nv_bool Eigen::RefBase<Derived>::construct(Expression &) [with Derived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Expression=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 301
            instantiation of "Eigen::Ref<PlainObjectType, Options, StrideType>::Ref(const Eigen::DenseBase<Derived> &, std::enable_if_t<<expression>, Derived> *) [with PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Options=0, StrideType=Eigen::OuterStride<-1>, Derived=Eigen::Block<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, -1, false>]" at line 422 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::compute() [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex]" at line 132 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 6 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Rhs=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Side=1, Mode=5]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Mode_=5U, Side=1, OtherDerived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Mode_=5U, OtherDerived=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>]" at line 448 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "Eigen::Index Eigen::internal::partial_lu_impl<Scalar, StorageOrder, PivIndex, SizeAtCompileTime>::blocked_lu(Eigen::Index, Eigen::Index, Scalar *, Eigen::Index, PivIndex *, PivIndex &, Eigen::Index) [with Scalar=std::complex<double>, StorageOrder=1, PivIndex=int, SizeAtCompileTime=-1]" at line 471 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::partial_lu_inplace(MatrixType &, TranspositionType &, TranspositionType::StorageIndex &) [with MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, TranspositionType=Eigen::Transpositions<-1, -1, Eigen::DefaultPermutationIndex>]" at line 495 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            [ 7 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h(482): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("sum") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    if (SizeAtCompileTime == 0 || (SizeAtCompileTime == Dynamic && size() == 0)) return Scalar(0);
                                                                                        ^
          detected during:
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>>, const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>>]" at line 604 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/ProductEvaluators.h
            instantiation of "const Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::CoeffReturnType Eigen::internal::product_evaluator<Eigen::Product<Lhs, Rhs, 1>, ProductTag, Eigen::DenseShape, Eigen::DenseShape, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Lhs>::Scalar, Eigen::internal::traits<Eigen::Product<Lhs, Rhs, 1>::Rhs>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with Lhs=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Rhs=Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, ProductTag=3]" at line 618 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 630 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeffByOuterInner(Eigen::Index, Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Functor=Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, Version=0]" at line 326 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 0, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>>, Eigen::internal::evaluator<Eigen::Product<Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1>>, Eigen::internal::sub_assign_op<std::complex<double>, std::complex<double>>, 0>]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 16 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=1, BlockCols=-1, InnerPanel=true]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>]" at line 281
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::unary_evaluator(const Eigen::internal::unary_evaluator<Eigen::Transpose<ArgType>, Eigen::internal::IndexBased, Eigen::Transpose<ArgType>::Scalar>::XprType &) [with ArgType=const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>]" at line 106
            [ 28 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, 1, 0, -1, 1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, BlockRows=-1, BlockCols=1, InnerPanel=false]" at line 112
            instantiation of "Eigen::internal::evaluator<const T>::evaluator(const T &) [with T=Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>]" at line 926
            instantiation of "Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::Data::Data(const Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>, Eigen::internal::IndexBased, Eigen::internal::IndexBased, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs>::Scalar, Eigen::internal::traits<Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs>::Scalar>::XprType &) [with BinaryOp=Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, Lhs=const Eigen::Transpose<const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, 1, -1, true>>, Rhs=const Eigen::Block<const Eigen::Ref<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 0, Eigen::OuterStride<-1>>, -1, 1, false>]" at line 895
            [ 25 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20013-D: calling a constexpr __host__ function("cols") from a __host__ __device__ function("rows") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_xpr.cols(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Inverse<XprType>::rows() const noexcept [with XprType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>]" at line 539 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex=Eigen::DefaultPermutationIndex]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 5 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20013-D: calling a constexpr __host__ function("rows") from a __host__ __device__ function("cols") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index cols() const noexcept { return m_xpr.rows(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Inverse<XprType>::cols() const noexcept [with XprType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>]" at line 539 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Inverse<Eigen::PartialPivLU<MatrixType, PermutationIndex>>, Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, Eigen::PartialPivLU<MatrixType, PermutationIndex>::Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, MatrixType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex=Eigen::DefaultPermutationIndex]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 5 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20013-D: calling a constexpr __host__ function("cols") from a __host__ __device__ function("rows") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_dec.cols(); }
                                                                          ^
          detected during:
            instantiation of "Eigen::Index Eigen::Solve<Decomposition, RhsType>::rows() const noexcept [with Decomposition=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 129
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Scalar=std::complex<double>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, std::enable_if_t<<expression>, void *>) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>, Func=Eigen::internal::assign_op<std::complex<double>, std::complex<double>>]" at line 794 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Src=Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 754 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            [ 11 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Block<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, false>, PlainObjectType=Eigen::Matrix<std::complex<double>, 1, -1, 1, 1, -1>]" at line 1282
            instantiation of "Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::block_evaluator(const Eigen::internal::block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, true>::XprType &) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1164
            instantiation of "Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::evaluator(const Eigen::internal::evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>>::XprType &) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 726 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, false>, SrcXprType=Eigen::Block<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, false>, Functor=Eigen::internal::swap_assign_op<std::complex<double>>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Block<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, false>, SrcXprType=Eigen::Block<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, 1, -1, false>, Functor=Eigen::internal::swap_assign_op<std::complex<double>>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 27 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                          ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=long]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=long]" at line 1204 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1253 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::linear_coeff_impl(Eigen::Index, Eigen::internal::false_type) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1208 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            [ 33 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/functors/NullaryFunctors.h(44): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return row == col ? Scalar(1) : Scalar(0);
                                      ^
          detected during:
            instantiation of "const Scalar Eigen::internal::scalar_identity_op<Scalar>::operator()(IndexType, IndexType) const [with Scalar=std::complex<double>, IndexType=long]" at line 365 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Scalar Eigen::internal::nullary_wrapper<Scalar, NullaryOp, false, false, true>::operator()(const NullaryOp &, IndexType, IndexType) const [with Scalar=const std::complex<double>, NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, IndexType=long]" at line 484 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::CoeffReturnType Eigen::internal::evaluator<Eigen::CwiseNullaryOp<NullaryOp, PlainObjectType>>::coeff(IndexType, IndexType) const [with NullaryOp=Eigen::internal::scalar_identity_op<std::complex<double>>, PlainObjectType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, IndexType=long]" at line 1204 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::coeff(Eigen::Index, Eigen::Index) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1253 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IndexBased, Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar>::linear_coeff_impl(Eigen::Index, Eigen::internal::false_type) const [with ArgType=const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, BlockRows=1, BlockCols=-1, InnerPanel=false]" at line 1208 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h
            [ 33 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Side=1, Mode=5]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Mode_=5U, Side=1, OtherDerived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Mode_=5U, OtherDerived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 230 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::_solve_impl(const RhsType &, DstType &) const [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, DstType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Scalar=std::complex<double>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 14 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

Warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
          detected during:
            instantiation of "void Eigen::internal::triangular_solver_selector<Lhs, Rhs, Side, Mode, 0, -1>::run(const Lhs &, Rhs &) [with Lhs=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Rhs=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Side=1, Mode=2]" at line 191 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/SolveTriangular.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace<Side,OtherDerived>(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Mode_=2U, Side=1, OtherDerived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 452 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/TriangularMatrix.h
            instantiation of "void Eigen::TriangularViewImpl<MatrixType_, Mode_, Eigen::Dense>::solveInPlace(const Eigen::MatrixBase<OtherDerived> &) const [with MatrixType_=const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Mode_=2U, OtherDerived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 233 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/LU/PartialPivLU.h
            instantiation of "void Eigen::PartialPivLU<MatrixType_, PermutationIndex_>::_solve_impl(const RhsType &, DstType &) const [with MatrixType_=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, PermutationIndex_=Eigen::DefaultPermutationIndex, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, DstType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 133 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Solve<DecType, RhsType>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, void>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, DecType=Eigen::PartialPivLU<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, Eigen::DefaultPermutationIndex>, RhsType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<std::complex<double>>, Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, Scalar=std::complex<double>]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 14 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 849 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init1<T,OtherDerived>(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>, OtherDerived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 383 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseBase.h
            instantiation of "Eigen::DenseBase<Derived>::EvalReturnType Eigen::DenseBase<Derived>::eval() const [with Derived=Eigen::Inverse<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 22 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::DenseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 54 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, PlainObjectType=const Eigen::Matrix<int, -1, 1, 0, -1, 1>]" at line 1095
            instantiation of "Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::evaluator(const Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::XprType &) [with PlainObjectType=const Eigen::Matrix<int, -1, 1, 0, -1, 1>, MapOptions=0, StrideType=Eigen::Stride<0, 0>]" at line 392 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::internal::redux_evaluator<XprType_>::redux_evaluator(const Eigen::internal::redux_evaluator<XprType_>::XprType &) [with XprType_=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 441 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::redux(const BinaryOp &) const [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, BinaryOp=Eigen::internal::scalar_sum_op<int, int>]" at line 483 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 72 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseCompressedBase.h
            instantiation of "Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived=Eigen::SparseMatrix<std::complex<float>, 1, int>]" at line 62 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "scaluq::internal::SparseMatrixGateImpl<Fp>::SparseMatrixGateImpl(uint64_t, uint64_t, const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 68 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::SparseMatrixGateImpl<Fp>::get_inverse() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("conditional_aligned_realloc_new") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t copy_size = (std::min)(old_size, new_size);
                              ^
          detected during:
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new_auto<T,Align>(T *, std::size_t, std::size_t) [with T=int, Align=true]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "void Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::resize(Eigen::Index, Eigen::Index) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 765 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(Eigen::Index, Eigen::Index) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 1539 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, PlainObjectType=Eigen::Matrix<int, -1, 1, 0, -1, 1>]" at line 1095
            instantiation of "Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::evaluator(const Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::XprType &) [with PlainObjectType=Eigen::Matrix<int, -1, 1, 0, -1, 1>, MapOptions=0, StrideType=Eigen::Stride<0, 0>]" at line 732 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, SrcXprType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1, 0, -1, 1>>, Functor=Eigen::internal::assign_op<int, int>]" at line 899 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, SrcXprType=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1, 0, -1, 1>>, Functor=Eigen::internal::assign_op<int, int>, Weak=void]" at line 841 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, Src=Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1, 0, -1, 1>>, Func=Eigen::internal::assign_op<int, int>]" at line 812 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/AssignEvaluator.h
            [ 3 instantiation contexts not shown ]
            instantiation of "Derived &Eigen::DenseBase<Derived>::setConstant(const Eigen::DenseBase<Derived>::Scalar &) [with Derived=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 550 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h
            instantiation of "Derived &Eigen::DenseBase<Derived>::setZero() [with Derived=Eigen::Map<Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 1540 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                              ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                         ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                                    ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                                               ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<float>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<float>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<float>, OtherScalar=std::complex<float>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/NumTraits.h(207): warning #20013-D: calling a constexpr __host__ function("max") from a __host__ __device__ function("highest") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr static inline T highest() { return (numext::numeric_limits<T>::max)(); }
                                                                  ^
          detected during:
            instantiation of "T Eigen::GenericNumTraits<T>::highest() [with T=int]" at line 80 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::resize(Eigen::Index, double) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 1558 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=float]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 68 of /workspaces/scaluq/src/gate/gate_matrix.cpp
            instantiation of "std::shared_ptr<const scaluq::internal::GateBase<Fp>> scaluq::internal::SparseMatrixGateImpl<Fp>::get_inverse() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                              ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                         ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                                    ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                                                               ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline RealScalar run(const Scalar& x) { return x.real() * x.real() + x.imag() * x.imag(); }
                                                                     ^
          detected during:
            instantiation of "Eigen::internal::abs2_impl_default<Scalar, true>::RealScalar Eigen::internal::abs2_impl_default<Scalar, true>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 231
            instantiation of "Eigen::internal::abs2_impl<Scalar>::RealScalar Eigen::internal::abs2_impl<Scalar>::run(const Scalar &) [with Scalar=std::complex<double>]" at line 1099
            instantiation of "Eigen::internal::abs2_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::abs2(const Scalar &) [with Scalar=std::complex<double>]" at line 1847
            instantiation of "__nv_bool Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::internal::scalar_fuzzy_default_impl<Scalar, true, false>::RealScalar &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 1862
            instantiation of "__nv_bool Eigen::internal::isMuchSmallerThan(const Scalar &, const OtherScalar &, const Eigen::NumTraits<Scalar>::Real &) [with Scalar=std::complex<double>, OtherScalar=std::complex<double>]" at line 169 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "void Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::incrementToNonZero() [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 142 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseView.h
            instantiation of "Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar>::InnerIterator::InnerIterator(const Eigen::internal::unary_evaluator<Eigen::SparseView<ArgType>, Eigen::internal::IndexBased, Eigen::SparseView<ArgType>::Scalar> &, Eigen::Index) [with ArgType=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 1545 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 777 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrixBase<OtherDerived> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int, OtherDerived=Eigen::SparseView<Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>]" at line 59 of /workspaces/scaluq/include/scaluq/gate/gate_matrix.hpp
            instantiation of "scaluq::internal::SparseComplexMatrix<Fp> scaluq::internal::SparseMatrixGateImpl<Fp>::get_sparse_matrix() const [with Fp=double]" at line 104 of /workspaces/scaluq/src/gate/gate_matrix.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_xpr.cols(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index cols() const noexcept { return m_xpr.rows(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_dec.cols(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_xpr.cols(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index cols() const noexcept { return m_xpr.rows(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr Index rows() const noexcept { return m_dec.cols(); }
                                                             ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::MapBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)1> ,     ::std::complex<float>  *, long &, long & > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Map< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::Stride<(int)-1, (int)0> > > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::Stride<(int)-1, (int)0> , long, long > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Map< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::Stride<(int)-1, (int)0> > > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::MapBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)1> ,     ::std::complex<float>  *, long &, long & > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Block< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)-1, (int)-1, (bool)0> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::Stride<(int)-1, (int)0> , long, long > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Block< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)-1, (int)-1, (bool)0> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::cols() const") from a __host__ __device__ function("Eigen::Inverse< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> > ::rows const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::rows() const") from a __host__ __device__ function("Eigen::Inverse< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> > ::cols const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::cols() const") from a __host__ __device__ function("Eigen::Solve< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ,  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_identity_op<    ::std::complex<float> > ,  ::Eigen::Matrix<    ::std::complex<float> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > > ::rows const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::MapBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)1> ,     ::std::complex<double>  *, long &, long & > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Map< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::Stride<(int)-1, (int)0> > > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::Stride<(int)-1, (int)0> , long, long > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Map< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::Stride<(int)-1, (int)0> > > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(189): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::MapBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)1> ,     ::std::complex<double>  *, long &, long & > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Block< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)-1, (int)-1, (bool)0> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Ref.h(190): warning #20013-D: calling a constexpr __host__ function("decltype((::new ((void *)(int)0) T1(std::declval<T2> ()...)))  ::std::construct_at< ::Eigen::Stride<(int)-1, (int)0> , long, long > (T1 *, T2 &&...)") from a __host__ __device__ function("Eigen::RefBase< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > > ::construct< ::Eigen::Block< ::Eigen::Ref< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)0,  ::Eigen::OuterStride<(int)-1> > , (int)-1, (int)-1, (bool)0> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(54): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::cols() const") from a __host__ __device__ function("Eigen::Inverse< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> > ::rows const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Inverse.h(55): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::rows() const") from a __host__ __device__ function("Eigen::Inverse< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> > ::cols const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Solve.h(69): warning #20013-D: calling a constexpr __host__ function("Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ::cols() const") from a __host__ __device__ function("Eigen::Solve< ::Eigen::PartialPivLU< ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , int> ,  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_identity_op<    ::std::complex<double> > ,  ::Eigen::Matrix<    ::std::complex<double> , (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > > ::rows const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1940): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::internal::conj_impl<    ::std::complex<float> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1940): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::internal::conj_impl<    ::std::complex<double> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<float> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<float> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<float> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<float> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<double> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<double> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<double> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(224): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::abs2_impl_default<    ::std::complex<double> , (bool)1> ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<int, (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<    ::std::complex<float> , (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<    ::std::complex<double> , (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::numext::abs<    ::std::complex<float> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::numext::abs<    ::std::complex<float> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::numext::abs<    ::std::complex<double> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::numext::abs<    ::std::complex<double> > ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator /") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator +") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::operator /") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_divide_fast<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_divide_fast<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[14/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -I/workspaces/scaluq/build/generated -O3 -DNDEBUG -std=c++11 -MD -MT _deps/kokkos-build/CMakeFiles/impl_git_version.dir/__/__/generated/Kokkos_Version_Info.cpp.o -MF _deps/kokkos-build/CMakeFiles/impl_git_version.dir/__/__/generated/Kokkos_Version_Info.cpp.o.d -o _deps/kokkos-build/CMakeFiles/impl_git_version.dir/__/__/generated/Kokkos_Version_Info.cpp.o -c /workspaces/scaluq/build/generated/Kokkos_Version_Info.cpp
[15/67] : && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /opt/cmake-3.28.0/bin/cmake -E rm -f _deps/kokkos-build/libimpl_git_version.a && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/ar qc _deps/kokkos-build/libimpl_git_version.a  _deps/kokkos-build/CMakeFiles/impl_git_version.dir/__/__/generated/Kokkos_Version_Info.cpp.o && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/ranlib _deps/kokkos-build/libimpl_git_version.a && :
[16/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/kokkos.cpp.o -MF CMakeFiles/scaluq.dir/src/kokkos.cpp.o.d -o CMakeFiles/scaluq.dir/src/kokkos.cpp.o -c /workspaces/scaluq/src/kokkos.cpp
[17/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Abort.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Abort.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Abort.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Abort.cpp
[18/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_CPUDiscovery.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_CPUDiscovery.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_CPUDiscovery.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_CPUDiscovery.cpp
[19/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/update_ops_sparse_matrix.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/update_ops_sparse_matrix.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/update_ops_sparse_matrix.cpp.o -c /workspaces/scaluq/src/gate/update_ops_sparse_matrix.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[20/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Error.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Error.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Error.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Error.cpp
[21/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/operator/apply_pauli.cpp.o -MF CMakeFiles/scaluq.dir/src/operator/apply_pauli.cpp.o.d -o CMakeFiles/scaluq.dir/src/operator/apply_pauli.cpp.o -c /workspaces/scaluq/src/operator/apply_pauli.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/src/operator/apply_pauli.cpp(234): warning #20013-D: calling a constexpr __host__ function("popcount") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                      Kokkos::TeamThreadRange(team, states.dim() >> std::popcount(control_mask)),
                                                                    ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(246): warning #20013-D: calling a constexpr __host__ function("countl_zero") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                      sizeof(std::uint64_t) * 8 - std::countl_zero(bit_flip_mask) - 1;
                                                  ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(249): warning #20013-D: calling a constexpr __host__ function("popcount") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                                              states.dim() >> (std::popcount(control_mask) + 1)),
                                                               ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(233): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  Kokkos::parallel_for(
                  ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(245): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  std::uint64_t pivot =
                                      ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(247): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  Kokkos::parallel_for(
                  ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(233): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  Kokkos::parallel_for(
                  ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(245): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  std::uint64_t pivot =
                                      ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(247): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                  Kokkos::parallel_for(
                  ^

/workspaces/scaluq/src/operator/apply_pauli.cpp(234): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<float> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/operator/apply_pauli.cpp(246): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::countl_zero<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<float> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/operator/apply_pauli.cpp(249): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<float> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/operator/apply_pauli.cpp(234): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<double> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/operator/apply_pauli.cpp(246): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::countl_zero<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<double> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/operator/apply_pauli.cpp(249): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::apply_pauli_rotation<double> (unsigned long, unsigned long, unsigned long,  ::Kokkos::complex<T1> , T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[22/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/update_ops_standard.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/update_ops_standard.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/update_ops_standard.cpp.o -c /workspaces/scaluq/src/gate/update_ops_standard.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/src/gate/update_ops_standard.cpp(418): warning #20013-D: calling a constexpr __host__ function("popcount") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                                          states.dim() >> std::popcount(target_mask | control_mask)),
                                                          ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(485): warning #20013-D: calling a constexpr __host__ function("popcount") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                                          states.dim() >> std::popcount(target_mask | control_mask)),
                                                          ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(553): warning #20013-D: calling a constexpr __host__ function("popcount") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                                          states.dim() >> std::popcount(target_mask | control_mask)),
                                                          ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(416): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(416): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(483): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(483): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(551): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(551): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
              Kokkos::parallel_for(
              ^

/workspaces/scaluq/src/gate/update_ops_standard.cpp(418): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::rx_gate<float> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/gate/update_ops_standard.cpp(418): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::rx_gate<double> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/gate/update_ops_standard.cpp(485): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::ry_gate<float> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/gate/update_ops_standard.cpp(485): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::ry_gate<double> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/gate/update_ops_standard.cpp(553): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::rz_gate<float> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/src/gate/update_ops_standard.cpp(553): warning #20013-D: calling a constexpr __host__ function("std::enable_if<std::__or_<    ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned char> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned short> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned int> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long> ,  ::std::is_same<   ::std::remove_cv<T1> ::type, unsigned long long>  > ::value, int> ::type  ::std::popcount<unsigned long> (T1)") from a __host__ __device__ function("void scaluq::internal::rz_gate<double> (unsigned long, unsigned long, T1,     ::std::vector<T1, ::std::allocator<T1> > ,  ::scaluq::StateVectorBatched<T1>  &)::[lambda(const  ::Kokkos::Impl::CudaTeamMember &) (instance 1)]::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[23/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/operator/pauli_operator.cpp.o -MF CMakeFiles/scaluq.dir/src/operator/pauli_operator.cpp.o.d -o CMakeFiles/scaluq.dir/src/operator/pauli_operator.cpp.o -c /workspaces/scaluq/src/operator/pauli_operator.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<float>, std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<float>>, const Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>>>]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix() const [with Fp=float]" at line 297 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("_call_op_impl") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      m_functor((IdxOrMemberTypes &&) idxs...,
               ^
          detected during:
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::_call_op_impl(IdxOrMemberTypes &&..., Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::value_type &) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IdxOrMemberTypes=<Kokkos::OpenMP::size_type &>]" at line 352
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::operator()(IndexOrMemberOrTagType1 &&, IndexOrMemberTypesThenValueType &&...) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IndexOrMemberOrTagType1=Kokkos::OpenMP::size_type &, IndexOrMemberTypesThenValueType=<Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t> &>]" at line 54 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<std::is_void<TagType>::value, void> Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range<TagType>(const Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::FunctorType &, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::reference_type) [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>, TagType=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 106 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 1517 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute_impl(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 1533 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Dummy=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 567
            instantiation of "auto Kokkos::parallel_reduce(const std::string &, const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 594
            instantiation of "auto Kokkos::parallel_reduce(const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 263 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=float]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("_call_op_impl") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      m_functor((IdxOrMemberTypes &&) idxs...,
               ^
          detected during:
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::_call_op_impl(IdxOrMemberTypes &&..., Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::value_type &) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IdxOrMemberTypes=<Kokkos::OpenMP::size_type &>]" at line 352
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::operator()(IndexOrMemberOrTagType1 &&, IndexOrMemberTypesThenValueType &&...) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IndexOrMemberOrTagType1=Kokkos::OpenMP::size_type &, IndexOrMemberTypesThenValueType=<Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t> &>]" at line 54 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<std::is_void<TagType>::value, void> Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range<TagType>(const Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::FunctorType &, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::reference_type) [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>, TagType=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 106 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 1517 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute_impl(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 1533 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Dummy=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 567
            instantiation of "auto Kokkos::parallel_reduce(const std::string &, const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 594
            instantiation of "auto Kokkos::parallel_reduce(const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 263 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=float]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 266 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=float]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 381 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 564 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 386 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, OtherDerived=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<std::complex<double>, std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<std::complex<double>>, const Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>>>]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix() const [with Fp=double]" at line 297 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("_call_op_impl") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      m_functor((IdxOrMemberTypes &&) idxs...,
               ^
          detected during:
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::_call_op_impl(IdxOrMemberTypes &&..., Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::value_type &) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IdxOrMemberTypes=<Kokkos::OpenMP::size_type &>]" at line 352
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::operator()(IndexOrMemberOrTagType1 &&, IndexOrMemberTypesThenValueType &&...) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IndexOrMemberOrTagType1=Kokkos::OpenMP::size_type &, IndexOrMemberTypesThenValueType=<Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t> &>]" at line 54 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<std::is_void<TagType>::value, void> Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range<TagType>(const Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::FunctorType &, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::reference_type) [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>, TagType=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 106 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 1517 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute_impl(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 1533 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Dummy=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 567
            instantiation of "auto Kokkos::parallel_reduce(const std::string &, const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 594
            instantiation of "auto Kokkos::parallel_reduce(const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 263 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=double]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("_call_op_impl") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      m_functor((IdxOrMemberTypes &&) idxs...,
               ^
          detected during:
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::_call_op_impl(IdxOrMemberTypes &&..., Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::value_type &) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IdxOrMemberTypes=<Kokkos::OpenMP::size_type &>]" at line 352
            instantiation of "void Kokkos::Impl::CombinedReductionFunctorWrapperImpl<std::integer_sequence<size_t, Idxs...>, Functor, Space, Reducers...>::operator()(IndexOrMemberOrTagType1 &&, IndexOrMemberTypesThenValueType &&...) const [with Idxs=<0UL, 1UL, 2UL>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Space=Kokkos::OpenMP::memory_space, Reducers=<Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, IndexOrMemberOrTagType1=Kokkos::OpenMP::size_type &, IndexOrMemberTypesThenValueType=<Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t> &>]" at line 54 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<std::is_void<TagType>::value, void> Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range<TagType>(const Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::FunctorType &, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::reference_type) [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>, TagType=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 106 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduce<CombinedFunctorReducerType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with CombinedFunctorReducerType=Kokkos::Impl::CombinedFunctorReducer<Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::FunctorAnalysis<Kokkos::Impl::FunctorPatternInterface::REDUCE, Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Kokkos::Impl::CombinedReducerValueImpl<std::integer_sequence<std::size_t, 0UL, 1UL, 2UL>, std::size_t, std::size_t, std::size_t>>::Reducer, void>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 1517 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "void Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute_impl(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 1533 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel_Reduce.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelReduceAdaptor<PolicyType, FunctorType, ReturnType>::execute(const std::string &, const PolicyType &, const FunctorType &, ReturnType &) [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Impl::CombinedReductionFunctorWrapper<lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, ReturnType=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>, Dummy=Kokkos::Impl::CombinedReducer<Kokkos::OpenMP::memory_space, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>, Kokkos::Sum<std::size_t, Kokkos::OpenMP::memory_space>>]" at line 567
            instantiation of "auto Kokkos::parallel_reduce(const std::string &, const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 594
            instantiation of "auto Kokkos::parallel_reduce(const PolicyType &, const Functor &, ReturnType1 &&, ReturnType2 &&, ReturnTypes &&...)->std::enable_if_t<Kokkos::is_execution_policy<PolicyType>::value, void> noexcept [with PolicyType=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, Functor=lambda [](uint64_t, uint64_t &, uint64_t &, uint64_t &)->void, ReturnType1=uint64_t &, ReturnType2=uint64_t &, ReturnTypes=<uint64_t &>]" at line 263 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=double]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 266 of /workspaces/scaluq/src/operator/pauli_operator.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::PauliOperator<Fp>::get_matrix_ignoring_coef() const [with Fp=double]" at line 238 of /workspaces/scaluq/src/operator/pauli_operator.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<float> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::real() const") from a __host__ __device__ function("Eigen::internal::real_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::imag() const") from a __host__ __device__ function("Eigen::internal::imag_impl<    ::std::complex<double> > ::run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("scaluq::PauliOperator<float> ::get_matrix_ignoring_coef() const::[lambda(unsigned long, unsigned long &, unsigned long &, unsigned long &) (instance 1)]::operator ()(unsigned long, unsigned long &, unsigned long &, unsigned long &) const") from a __host__ __device__ function("Kokkos::Impl::CombinedReductionFunctorWrapperImpl<    ::std::integer_sequence<unsigned long, (unsigned long)0ul, (unsigned long)1ul, (unsigned long)2ul > ,  ::scaluq::PauliOperator<float> ::get_matrix_ignoring_coef() const   ::[lambda(unsigned long, unsigned long &, unsigned long &, unsigned long &) (instance 1)],  ::Kokkos::HostSpace,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace> ,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace> ,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace>  > ::_call_op_impl<unsigned long & >  const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Combined_Reducer.hpp(384): warning #20013-D: calling a constexpr __host__ function("scaluq::PauliOperator<double> ::get_matrix_ignoring_coef() const::[lambda(unsigned long, unsigned long &, unsigned long &, unsigned long &) (instance 1)]::operator ()(unsigned long, unsigned long &, unsigned long &, unsigned long &) const") from a __host__ __device__ function("Kokkos::Impl::CombinedReductionFunctorWrapperImpl<    ::std::integer_sequence<unsigned long, (unsigned long)0ul, (unsigned long)1ul, (unsigned long)2ul > ,  ::scaluq::PauliOperator<double> ::get_matrix_ignoring_coef() const   ::[lambda(unsigned long, unsigned long &, unsigned long &, unsigned long &) (instance 1)],  ::Kokkos::HostSpace,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace> ,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace> ,  ::Kokkos::Sum<unsigned long,  ::Kokkos::HostSpace>  > ::_call_op_impl<unsigned long & >  const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<float> ::complex(float, float)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<float> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20013-D: calling a constexpr __host__ function("std::complex<double> ::complex(double, double)") from a __host__ __device__ function("Eigen::complex_operator_detail::complex_multiply<double> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[24/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Command_Line_Parsing.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Command_Line_Parsing.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Command_Line_Parsing.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Command_Line_Parsing.cpp
[25/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostBarrier.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostBarrier.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostBarrier.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_HostBarrier.cpp
[26/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_ExecPolicy.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_ExecPolicy.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_ExecPolicy.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_ExecPolicy.cpp
[27/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_HostSpace.cpp
[28/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemoryPool.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemoryPool.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemoryPool.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_MemoryPool.cpp
[29/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostThreadTeam.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostThreadTeam.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostThreadTeam.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_HostThreadTeam.cpp
[30/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemorySpace.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemorySpace.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_MemorySpace.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_MemorySpace.cpp
[31/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/state/state_vector.cpp.o -MF CMakeFiles/scaluq.dir/src/state/state_vector.cpp.o.d -o CMakeFiles/scaluq.dir/src/state/state_vector.cpp.o -c /workspaces/scaluq/src/state/state_vector.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[32/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/types.cpp.o -MF CMakeFiles/scaluq.dir/src/types.cpp.o.d -o CMakeFiles/scaluq.dir/src/types.cpp.o -c /workspaces/scaluq/src/types.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("conditional_aligned_realloc_new") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t copy_size = (std::min)(old_size, new_size);
                              ^
          detected during:
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new_auto<T,Align>(T *, std::size_t, std::size_t) [with T=int, Align=true]" at line 737 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "void Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::resize(Eigen::Index, Eigen::Index) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 940 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "void Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::initAssignment(const Other &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int, Other=Eigen::SparseMatrix<std::complex<float>, 1, int>]" at line 856 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 804 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 11 of /workspaces/scaluq/src/types.cpp
            instantiation of "scaluq::internal::SparseMatrix<Fp>::SparseMatrix(const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=float]" at line 27 of /workspaces/scaluq/src/types.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/NumTraits.h(207): warning #20013-D: calling a constexpr __host__ function("max") from a __host__ __device__ function("highest") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     constexpr static inline T highest() { return (numext::numeric_limits<T>::max)(); }
                                                                  ^
          detected during:
            instantiation of "T Eigen::GenericNumTraits<T>::highest() [with T=int]" at line 80 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::resize(Eigen::Index, double) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 43 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::operator=(const Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 859 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 804 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 11 of /workspaces/scaluq/src/types.cpp
            instantiation of "scaluq::internal::SparseMatrix<Fp>::SparseMatrix(const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=float]" at line 27 of /workspaces/scaluq/src/types.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 460
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new<T,Align>(T *, std::size_t, std::size_t) [with T=std::complex<float>, Align=true]" at line 492
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new_auto<T,Align>(T *, std::size_t, std::size_t) [with T=std::complex<float>, Align=true]" at line 190 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::reallocate(Eigen::Index) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 82 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::resize(Eigen::Index, double) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 43 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::operator=(const Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &) [with Scalar_=std::complex<float>, StorageIndex_=int]" at line 859 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 804 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 11 of /workspaces/scaluq/src/types.cpp
            instantiation of "scaluq::internal::SparseMatrix<Fp>::SparseMatrix(const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=float]" at line 27 of /workspaces/scaluq/src/types.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CoreEvaluators.h(1012): warning #20013-D: calling a constexpr __host__ function("check_implication") from a __host__ __device__ function("mapbase_evaluator") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      static_assert(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0, internal::inner_stride_at_compile_time<Derived>::ret == 1), "PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1");
                    ^
          detected during:
            instantiation of "Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::mapbase_evaluator(const Eigen::internal::mapbase_evaluator<Derived, PlainObjectType>::XprType &) [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, PlainObjectType=const Eigen::Matrix<int, -1, 1, 0, -1, 1>]" at line 1095
            instantiation of "Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::evaluator(const Eigen::internal::evaluator<Eigen::Map<PlainObjectType, MapOptions, StrideType>>::XprType &) [with PlainObjectType=const Eigen::Matrix<int, -1, 1, 0, -1, 1>, MapOptions=0, StrideType=Eigen::Stride<0, 0>]" at line 392 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::internal::redux_evaluator<XprType_>::redux_evaluator(const Eigen::internal::redux_evaluator<XprType_>::XprType &) [with XprType_=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 441 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::redux(const BinaryOp &) const [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>, BinaryOp=Eigen::internal::scalar_sum_op<int, int>]" at line 483 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Redux.h
            instantiation of "Eigen::DenseBase<Derived>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived=Eigen::Map<const Eigen::Matrix<int, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0>>]" at line 72 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseCompressedBase.h
            [ 5 instantiation contexts not shown ]
            instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &) [with Dst=Eigen::SparseMatrix<std::complex<float>, 1, int>, Src=Eigen::SparseMatrix<std::complex<float>, 1, int>]" at line 44 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseAssign.h
            instantiation of "Derived &Eigen::SparseMatrixBase<Derived>::operator=(const Derived &) [with Derived=Eigen::SparseMatrix<std::complex<float>, 1, int>]" at line 861 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 804 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<float>, Options_=1, StorageIndex_=int]" at line 11 of /workspaces/scaluq/src/types.cpp
            instantiation of "scaluq::internal::SparseMatrix<Fp>::SparseMatrix(const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=float]" at line 27 of /workspaces/scaluq/src/types.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 460
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new<T,Align>(T *, std::size_t, std::size_t) [with T=std::complex<double>, Align=true]" at line 492
            instantiation of "T *Eigen::internal::conditional_aligned_realloc_new_auto<T,Align>(T *, std::size_t, std::size_t) [with T=std::complex<double>, Align=true]" at line 190 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::reallocate(Eigen::Index) [with Scalar_=std::complex<double>, StorageIndex_=int]" at line 82 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "void Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::resize(Eigen::Index, double) [with Scalar_=std::complex<double>, StorageIndex_=int]" at line 43 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/CompressedStorage.h
            instantiation of "Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &Eigen::internal::CompressedStorage<Scalar_, StorageIndex_>::operator=(const Eigen::internal::CompressedStorage<Scalar_, StorageIndex_> &) [with Scalar_=std::complex<double>, StorageIndex_=int]" at line 859 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::operator=(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int]" at line 804 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/SparseCore/SparseMatrix.h
            instantiation of "Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_>::SparseMatrix(const Eigen::SparseMatrix<Scalar_, Options_, StorageIndex_> &) [with Scalar_=std::complex<double>, Options_=1, StorageIndex_=int]" at line 11 of /workspaces/scaluq/src/types.cpp
            instantiation of "scaluq::internal::SparseMatrix<Fp>::SparseMatrix(const scaluq::internal::SparseComplexMatrix<Fp> &) [with Fp=double]" at line 27 of /workspaces/scaluq/src/types.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<int, (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<    ::std::complex<float> , (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(455): warning #20013-D: calling a constexpr __host__ function("const T1 &  ::std::min<unsigned long> (const T1 &, const T1 &)") from a __host__ __device__ function("Eigen::internal::conditional_aligned_realloc_new<    ::std::complex<double> , (bool)1> ") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[33/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/operator/operator.cpp.o -MF CMakeFiles/scaluq.dir/src/operator/operator.cpp.o.d -o CMakeFiles/scaluq.dir/src/operator/operator.cpp.o -c /workspaces/scaluq/src/operator/operator.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<float> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<float> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<float> &)->Kokkos::complex<float>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=float]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 98 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->uint64_t>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<uint64_t *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->uint64_t]" at line 103 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("operator()") from a __host__ __device__ function("operator()") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                                                  ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
   void operator()(index_type i) const { m_d_first[i] = m_unary_op(m_first[i]); }
                                         ^
          detected during:
            instantiation of "void Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::operator()(Kokkos::Experimental::Impl::StdTransformFunctor<InputIterator, OutputIterator, UnaryFunctorType>::index_type) const [with InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryFunctorType=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 66 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "std::enable_if_t<<expression>, void> Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_work(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>, Enable=Kokkos::Impl::WorkTagTrait::base_traits::work_tag]" at line 58 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::exec_range(const FunctorType &, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member, Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::Member) [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 112 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Parallel_For.hpp
            instantiation of "void Kokkos::Impl::ParallelFor<FunctorType, Kokkos::RangePolicy<Traits...>, Kokkos::OpenMP>::execute() const [with FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Traits=<Kokkos::DefaultHostExecutionSpace>]" at line 144 of /workspaces/scaluq/build/_deps/kokkos-src/core/src/Kokkos_Parallel.hpp
            instantiation of "void Kokkos::parallel_for(const std::string &, const ExecPolicy &, const FunctorType &) [with ExecPolicy=Kokkos::RangePolicy<Kokkos::DefaultHostExecutionSpace>, FunctorType=Kokkos::Experimental::Impl::StdTransformFunctor<Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>>, Enable=void]" at line 94
            instantiation of "OutputIterator Kokkos::Experimental::Impl::transform_exespace_impl(const std::string &, const ExecutionSpace &, InputIterator, InputIterator, OutputIterator, UnaryOperation) [with ExecutionSpace=Kokkos::DefaultHostExecutionSpace, InputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<const scaluq::PauliOperator<double> *, Kokkos::HostSpace, Kokkos::MemoryTraits<1U>>>, OutputIterator=Kokkos::Experimental::Impl::RandomAccessIterator<Kokkos::View<Kokkos::complex<double> *, Kokkos::HostSpace>>, UnaryOperation=lambda [](const scaluq::PauliOperator<double> &)->Kokkos::complex<double>]" at line 108 of /workspaces/scaluq/src/operator/operator.cpp
            instantiation of "scaluq::Complex<Fp> scaluq::Operator<Fp>::get_expectation_value(const scaluq::StateVector<Fp, scaluq::DefaultSpace> &) const [with Fp=double]" at line 277 of /workspaces/scaluq/src/operator/operator.cpp

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 1)]::operator ()(const  ::scaluq::PauliOperator<float>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<float>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<unsigned long *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 1)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 2)]::operator ()(const  ::scaluq::PauliOperator<float>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<float>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<unsigned long *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 2)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 3)]::operator ()(const  ::scaluq::PauliOperator<float>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<float>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View< ::Kokkos::complex<float>  *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<float> ::get_expectation_value(const  ::scaluq::StateVector<float,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<float>  &) (instance 3)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 1)]::operator ()(const  ::scaluq::PauliOperator<double>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<double>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<unsigned long *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 1)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 2)]::operator ()(const  ::scaluq::PauliOperator<double>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<double>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<unsigned long *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 2)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src/std_algorithms/impl/Kokkos_Transform.hpp(42): warning #20013-D: calling a constexpr __host__ function("scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 3)]::operator ()(const  ::scaluq::PauliOperator<double>  &) const") from a __host__ __device__ function("Kokkos::Experimental::Impl::StdTransformFunctor< ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View<const  ::scaluq::PauliOperator<double>  *,  ::Kokkos::HostSpace,  ::Kokkos::MemoryTraits<(unsigned int)1u>  > > ,  ::Kokkos::Experimental::Impl::RandomAccessIterator< ::Kokkos::View< ::Kokkos::complex<double>  *,  ::Kokkos::HostSpace > > ,  ::scaluq::Operator<double> ::get_expectation_value(const  ::scaluq::StateVector<double,  ::Kokkos::Cuda>  &) const   ::[lambda(const  ::scaluq::PauliOperator<double>  &) (instance 3)]> ::operator () const") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.

[34/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Spinwait.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Spinwait.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Spinwait.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Spinwait.cpp
[35/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Stacktrace.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Stacktrace.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Stacktrace.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Stacktrace.cpp
[36/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Task.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Task.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Task.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/Cuda/Kokkos_Cuda_Task.cpp
[37/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Core.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Core.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Core.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Core.cpp
[38/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace_deepcopy.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace_deepcopy.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_HostSpace_deepcopy.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_HostSpace_deepcopy.cpp
[39/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Task.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Task.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Task.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Task.cpp
[40/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial_Task.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial_Task.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial_Task.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/Serial/Kokkos_Serial_Task.cpp
[41/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Profiling.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Profiling.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_Profiling.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_Profiling.cpp
[42/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP.cpp
[43/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/kokkos-build -O3 -DNDEBUG -MD -MT _deps/kokkos-build/simd/src/CMakeFiles/kokkossimd.dir/Kokkos_SIMD_dummy.cpp.o -MF _deps/kokkos-build/simd/src/CMakeFiles/kokkossimd.dir/Kokkos_SIMD_dummy.cpp.o.d -o _deps/kokkos-build/simd/src/CMakeFiles/kokkossimd.dir/Kokkos_SIMD_dummy.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/simd/src/Kokkos_SIMD_dummy.cpp
[44/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_SharedAlloc.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_SharedAlloc.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_SharedAlloc.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_SharedAlloc.cpp
[45/67] : && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /opt/cmake-3.28.0/bin/cmake -E rm -f _deps/kokkos-build/simd/src/libkokkossimd.a && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/ar qc _deps/kokkos-build/simd/src/libkokkossimd.a  _deps/kokkos-build/simd/src/CMakeFiles/kokkossimd.dir/Kokkos_SIMD_dummy.cpp.o && /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/ranlib _deps/kokkos-build/simd/src/libkokkossimd.a && :
[46/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/state/state_vector_batched.cpp.o -MF CMakeFiles/scaluq.dir/src/state/state_vector_batched.cpp.o.d -o CMakeFiles/scaluq.dir/src/state/state_vector_batched.cpp.o -c /workspaces/scaluq/src/state/state_vector_batched.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

[47/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/__/__/tpls/desul/src/Lock_Array_CUDA.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/__/__/tpls/desul/src/Lock_Array_CUDA.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/__/__/tpls/desul/src/Lock_Array_CUDA.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/tpls/desul/src/Lock_Array_CUDA.cpp
[48/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -I/workspaces/scaluq/build/_deps/eigen-src -isystem /usr/local/cuda/targets/x86_64-linux/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -std=c++20 scaluq PUBLIC -Wall -Wextra -Wunused-parameter -Wsign-compare -Wtype-limits -Wuninitialized -pthread -fopenmp "\$<IF:0,-O0" -g "-fsanitize=address,undefined,-O3>" -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT exe/CMakeFiles/main.dir/main.cpp.o -MF exe/CMakeFiles/main.dir/main.cpp.o.d -o exe/CMakeFiles/main.dir/main.cpp.o -c /workspaces/scaluq/exe/main.cpp
FAILED: exe/CMakeFiles/main.dir/main.cpp.o 
/workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -I/workspaces/scaluq/build/_deps/eigen-src -isystem /usr/local/cuda/targets/x86_64-linux/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -std=c++20 scaluq PUBLIC -Wall -Wextra -Wunused-parameter -Wsign-compare -Wtype-limits -Wuninitialized -pthread -fopenmp "\$<IF:0,-O0" -g "-fsanitize=address,undefined,-O3>" -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT exe/CMakeFiles/main.dir/main.cpp.o -MF exe/CMakeFiles/main.dir/main.cpp.o.d -o exe/CMakeFiles/main.dir/main.cpp.o -c /workspaces/scaluq/exe/main.cpp
sh: 1: cannot open IF:0: No such file
[49/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_hwloc.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_hwloc.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/impl/Kokkos_hwloc.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/impl/Kokkos_hwloc.cpp
[50/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -Wall -Wshadow -Wno-error=dangling-else -DGTEST_HAS_PTHREAD=1 -fexceptions -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -MD -MT _deps/googletest-build/googletest/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o -MF _deps/googletest-build/googletest/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o.d -o _deps/googletest-build/googletest/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o -c /workspaces/scaluq/build/_deps/googletest-src/googletest/src/gtest_main.cc
[51/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -isystem /workspaces/scaluq/build/_deps/googletest-src/googlemock/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googlemock -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -Wall -Wshadow -Wno-error=dangling-else -DGTEST_HAS_PTHREAD=1 -fexceptions -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -MD -MT _deps/googletest-build/googlemock/CMakeFiles/gmock_main.dir/src/gmock_main.cc.o -MF _deps/googletest-build/googlemock/CMakeFiles/gmock_main.dir/src/gmock_main.cc.o.d -o _deps/googletest-build/googlemock/CMakeFiles/gmock_main.dir/src/gmock_main.cc.o -c /workspaces/scaluq/build/_deps/googletest-src/googlemock/src/gmock_main.cc
[52/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_CudaSpace.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_CudaSpace.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_CudaSpace.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/Cuda/Kokkos_CudaSpace.cpp
[53/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Instance.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Instance.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Cuda/Kokkos_Cuda_Instance.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/Cuda/Kokkos_Cuda_Instance.cpp
[54/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -I/workspaces/scaluq/build/_deps/googletest-src/googlemock/include -I/workspaces/scaluq/build/_deps/googletest-src/googlemock -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest/include -isystem /workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -Wall -Wshadow -Wno-error=dangling-else -DGTEST_HAS_PTHREAD=1 -fexceptions -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -MD -MT _deps/googletest-build/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.o -MF _deps/googletest-build/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.o.d -o _deps/googletest-build/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.o -c /workspaces/scaluq/build/_deps/googletest-src/googlemock/src/gmock-all.cc
[55/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -DOPENMP -I/workspaces/scaluq/include -I/workspaces/scaluq/build/_deps/eigen-src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-src/algorithms/src -I/workspaces/scaluq/build/_deps/kokkos-build/simd/src -I/workspaces/scaluq/build/_deps/kokkos-src/simd/src -I/workspaces/scaluq/build/_deps/json-src/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++20 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/util/utility.cpp.o -MF CMakeFiles/scaluq.dir/src/util/utility.cpp.o.d -o CMakeFiles/scaluq.dir/src/util/utility.cpp.o -c /workspaces/scaluq/src/util/utility.cpp
/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(189): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("handmade_aligned_realloc") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      std::size_t count = (std::min)(new_size, old_size);
                          ^

Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                      ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
                                ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1385): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypotf(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
                               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1390): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return ::hypot(x.real(), x.imag());
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1465): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float com = ::expf(x.real());
              ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1466): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_real = com * ::cosf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1467): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    float res_imag = com * ::sinf(x.imag());
                   ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1468): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<float>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1473): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double com = ::exp(x.real());
               ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1474): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_real = com * ::cos(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1475): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    double res_imag = com * ::sin(x.imag());
                    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(1476): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<double>(res_real, res_imag);
    ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/RandomImpl.h(144): warning #20208-D: 'long double' is treated as 'double' in device code
      return static_cast<long double>(random_float_impl<double>::run(numRandomBits));
                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } 
                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                     ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(221): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } 
                                                                                       ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } 
                                                                         ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } 
                                                                                                        ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(222): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
  inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } 
                                                                                          ^

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 221 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 221

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(96): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.real(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1047
            instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                              ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/MathFunctions.h(131): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
                     static inline T run(const std::complex<T>& x) { return x.imag(); }
                                                                     ^
          detected during:
            instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1063
            instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 222 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(72): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>(a_real * b_real - a_imag * b_imag, a_imag * b_real + a_real * b_imag);
    ^
          detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/arch/GPU/Complex.h(83): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm, (a_imag * b_real - a_real * b_imag) / norm);
    ^
          detected during:
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 107
            instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 222

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<float>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<float>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<float>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 780 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init2<T0,T1>(Eigen::Index, Eigen::Index, std::enable_if_t<<expression>, T0> *) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>, T0=int, T1=int]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T0 &, const T1 &) [with Scalar_=std::complex<float>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T0=int, T1=int]" at line 82 of /workspaces/scaluq/src/util/utility.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::convert_internal_matrix_to_external_matrix(const scaluq::internal::Matrix<Fp> &) [with Fp=float]" at line 90 of /workspaces/scaluq/src/util/utility.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/util/Memory.h(347): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("default_construct_elements_of_array") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      for (i = 0; i < size; ++i) ::new (ptr + i) T;
                                                 ^
          detected during:
            instantiation of "T *Eigen::internal::default_construct_elements_of_array(T *, std::size_t) [with T=std::complex<double>]" at line 480
            instantiation of "T *Eigen::internal::conditional_aligned_new_auto<T,Align>(std::size_t) [with T=std::complex<double>, Align=true]" at line 502 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/DenseStorage.h
            instantiation of "void Eigen::DenseStorage<T, -1, -1, -1, Options_>::resize(Eigen::Index, Eigen::Index, Eigen::Index) [with T=std::complex<double>, Options_=1]" at line 312 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::resize(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 780 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/PlainObjectBase.h
            instantiation of "void Eigen::PlainObjectBase<Derived>::_init2<T0,T1>(Eigen::Index, Eigen::Index, std::enable_if_t<<expression>, T0> *) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>, T0=int, T1=int]" at line 317 of /workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/Matrix.h
            instantiation of "Eigen::Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>::Matrix(const T0 &, const T1 &) [with Scalar_=std::complex<double>, Rows_=-1, Cols_=-1, Options_=1, MaxRows_=-1, MaxCols_=-1, T0=int, T1=int]" at line 82 of /workspaces/scaluq/src/util/utility.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::convert_internal_matrix_to_external_matrix(const scaluq::internal::Matrix<Fp> &) [with Fp=double]" at line 90 of /workspaces/scaluq/src/util/utility.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<float>, -1, -1, 1, -1, -1>]" at line 95 of /workspaces/scaluq/src/util/utility.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::convert_coo_to_external_matrix(scaluq::internal::SparseMatrix<Fp>) [with Fp=float]" at line 103 of /workspaces/scaluq/src/util/utility.cpp

/workspaces/scaluq/build/_deps/eigen-src/Eigen/src/Core/CwiseNullaryOp.h(484): warning #20013-D: calling a constexpr __host__ function("complex") from a __host__ __device__ function("Zero") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    return Constant(rows, cols, Scalar(0));
                                ^
          detected during:
            instantiation of "const Eigen::DenseBase<Derived>::ConstantReturnType Eigen::DenseBase<Derived>::Zero(Eigen::Index, Eigen::Index) [with Derived=Eigen::Matrix<std::complex<double>, -1, -1, 1, -1, -1>]" at line 95 of /workspaces/scaluq/src/util/utility.cpp
            instantiation of "scaluq::internal::ComplexMatrix<Fp> scaluq::internal::convert_coo_to_external_matrix(scaluq::internal::SparseMatrix<Fp>) [with Fp=double]" at line 103 of /workspaces/scaluq/src/util/utility.cpp

[56/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Instance.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Instance.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/OpenMP/Kokkos_OpenMP_Instance.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/OpenMP/Kokkos_OpenMP_Instance.cpp
[57/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -fPIC -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial.cpp.o -MF _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial.cpp.o.d -o _deps/kokkos-build/core/src/CMakeFiles/kokkoscore.dir/Serial/Kokkos_Serial.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/core/src/Serial/Kokkos_Serial.cpp
[58/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++ -DKOKKOS_DEPENDENCE -I/workspaces/scaluq/build/_deps/kokkos-build/containers/src -I/workspaces/scaluq/build/_deps/kokkos-src/containers/src -I/workspaces/scaluq/build/_deps/kokkos-build -I/workspaces/scaluq/build/_deps/kokkos-build/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src -I/workspaces/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -isystem /usr/local/cuda/targets/x86_64-linux/include -O3 -DNDEBUG -std=c++17 -extended-lambda -Wext-lambda-captures-this -arch=sm_86 -fopenmp -MD -MT _deps/kokkos-build/containers/src/CMakeFiles/kokkoscontainers.dir/impl/Kokkos_UnorderedMap_impl.cpp.o -MF _deps/kokkos-build/containers/src/CMakeFiles/kokkoscontainers.dir/impl/Kokkos_UnorderedMap_impl.cpp.o.d -o _deps/kokkos-build/containers/src/CMakeFiles/kokkoscontainers.dir/impl/Kokkos_UnorderedMap_impl.cpp.o -c /workspaces/scaluq/build/_deps/kokkos-src/containers/src/impl/Kokkos_UnorderedMap_impl.cpp
[59/67] /workspaces/scaluq/build/_deps/kokkos-src/bin/kokkos_launch_compiler /workspaces/scaluq/build/_deps/kokkos-src/bin/nvcc_wrapper /usr/bin/g++ /usr/bin/g++  -I/workspaces/scaluq/build/_deps/googletest-src/googletest/include -I/workspaces/scaluq/build/_deps/googletest-src/googletest -O3 -DNDEBUG -Wall -Wshadow -Wno-error=dangling-else -DGTEST_HAS_PTHREAD=1 -fexceptions -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -MD -MT _deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o -MF _deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o.d -o _deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o -c /workspaces/scaluq/build/_deps/googletest-src/googletest/src/gtest-all.cc
ninja: build stopped: subcommand failed.
