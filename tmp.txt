ninja: Entering directory `build'
[1/18] Linking CXX static library lib/libgtest.a
[2/18] Linking CXX static library lib/libgtest_main.a
[3/18] Linking CXX static library lib/libgmock.a
[4/18] Linking CXX static library lib/libgmock_main.a
[5/18] cd /home/gandalfr/scaluq/build/_deps/kokkos-build && /usr/bin/cmake -DRUN_CHECK_GIT_VERSION=1 -DKOKKOS_SOURCE_DIR=/home/gandalfr/scaluq/build/_deps/kokkos-src -P /home/gandalfr/scaluq/build/_deps/kokkos-src/cmake/build_env_info.cmake
[6/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/gate.cpp.o
[7/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o
FAILED: CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o 
/usr/bin/c++ -DKOKKOS_DEPENDENCE -DSCALUQ_FLOAT64 -I/home/gandalfr/scaluq/include -I/home/gandalfr/scaluq/build/_deps/eigen-src -I/home/gandalfr/scaluq/build/_deps/kokkos-build -I/home/gandalfr/scaluq/build/_deps/kokkos-build/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/home/gandalfr/scaluq/build/_deps/kokkos-build/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/simd/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/simd/src -I/home/gandalfr/scaluq/build/_deps/json-src/include -std=gnu++23 -fPIC -Wall -Wextra -Wunused-parameter -Wsign-compare -Wtype-limits -Wuninitialized -pthread -fopenmp -O3 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/gate_probablistic.cpp.o -c /home/gandalfr/scaluq/src/gate/gate_probablistic.cpp
In file included from /home/gandalfr/scaluq/include/scaluq/gate/gate_standard.hpp:4,
                 from /home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:4,
                 from /home/gandalfr/scaluq/src/gate/gate_probablistic.cpp:1:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:229:75:   required from ‘decltype (((arr.reserve(declval<typename ConstructibleArrayType::size_type>()), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(const BasicJsonType&, ConstructibleArrayType&, priority_tag<1>) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; typename std::enable_if<std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value, int>::type <anonymous> = 0; decltype (((arr.reserve(declval<typename ConstructibleArrayType::size_type>()), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::size_type = long unsigned int; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:273:25:   required from ‘decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, nlohmann::json_abi_v3_11_3::detail::priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json(const BasicJsonType&, ConstructibleArrayType&) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; typename std::enable_if<((((is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value && (! is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value)) && (! is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value)) && (! std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value)) && (! is_basic_json<T>::value)), int>::type <anonymous> = 0; decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:108:1:   required from here
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >(const scaluq::Json&)’
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]’:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:273:25:   required from ‘decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, nlohmann::json_abi_v3_11_3::detail::priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json(const BasicJsonType&, ConstructibleArrayType&) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; typename std::enable_if<((((is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value && (! is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value)) && (! is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value)) && (! std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value)) && (! is_basic_json<T>::value)), int>::type <anonymous> = 0; decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> > > >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:108:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:229:75:   required from ‘decltype (((arr.reserve(declval<typename ConstructibleArrayType::size_type>()), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(const BasicJsonType&, ConstructibleArrayType&, priority_tag<1>) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; typename std::enable_if<std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value, int>::type <anonymous> = 0; decltype (((arr.reserve(declval<typename ConstructibleArrayType::size_type>()), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::size_type = long unsigned int; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:273:25:   required from ‘decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, nlohmann::json_abi_v3_11_3::detail::priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json(const BasicJsonType&, ConstructibleArrayType&) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; typename std::enable_if<((((is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value && (! is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value)) && (! is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value)) && (! std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value)) && (! is_basic_json<T>::value)), int>::type <anonymous> = 0; decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:110:1:   required from here
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >(const scaluq::Json&)’
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]’:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:273:25:   required from ‘decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, nlohmann::json_abi_v3_11_3::detail::priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) nlohmann::json_abi_v3_11_3::detail::from_json(const BasicJsonType&, ConstructibleArrayType&) [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; ConstructibleArrayType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; typename std::enable_if<((((is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value && (! is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value)) && (! is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value)) && (! std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value)) && (! is_basic_json<T>::value)), int>::type <anonymous> = 0; decltype (((nlohmann::json_abi_v3_11_3::detail::from_json_array_impl(j, arr, priority_tag<3>{}), j.get<typename ConstructibleArrayType::value_type>()), void())) = void; typename ConstructibleArrayType::value_type = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ValueType = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = std::vector<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >, std::allocator<scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> > > >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:110:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
[8/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o
FAILED: CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o 
/usr/bin/c++ -DKOKKOS_DEPENDENCE -DSCALUQ_FLOAT64 -I/home/gandalfr/scaluq/include -I/home/gandalfr/scaluq/build/_deps/eigen-src -I/home/gandalfr/scaluq/build/_deps/kokkos-build -I/home/gandalfr/scaluq/build/_deps/kokkos-build/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/home/gandalfr/scaluq/build/_deps/kokkos-build/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/simd/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/simd/src -I/home/gandalfr/scaluq/build/_deps/json-src/include -std=gnu++23 -fPIC -Wall -Wextra -Wunused-parameter -Wsign-compare -Wtype-limits -Wuninitialized -pthread -fopenmp -O3 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o -MF CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o.d -o CMakeFiles/scaluq.dir/src/gate/param_gate_probablistic.cpp.o -c /home/gandalfr/scaluq/src/gate/param_gate_probablistic.cpp
In file included from /home/gandalfr/scaluq/include/scaluq/gate/gate_standard.hpp:4,
                 from /home/gandalfr/scaluq/include/scaluq/gate/gate_probablistic.hpp:4,
                 from /home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:6,
                 from /home/gandalfr/scaluq/src/gate/param_gate_probablistic.cpp:1:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:127:1:   required from here
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >(const scaluq::Json&)’
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]’:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:127:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:129:1:   required from here
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >(const scaluq::Json&)’
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]’:
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:129:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
[9/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/gate_pauli.cpp.o
[10/16] Building CXX object CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o
FAILED: CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o 
/usr/bin/c++ -DKOKKOS_DEPENDENCE -DSCALUQ_FLOAT64 -I/home/gandalfr/scaluq/include -I/home/gandalfr/scaluq/build/_deps/eigen-src -I/home/gandalfr/scaluq/build/_deps/kokkos-build -I/home/gandalfr/scaluq/build/_deps/kokkos-build/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/core/src/../../tpls/desul/include -I/home/gandalfr/scaluq/build/_deps/kokkos-build/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/containers/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/algorithms/src -I/home/gandalfr/scaluq/build/_deps/kokkos-build/simd/src -I/home/gandalfr/scaluq/build/_deps/kokkos-src/simd/src -I/home/gandalfr/scaluq/build/_deps/json-src/include -std=gnu++23 -fPIC -Wall -Wextra -Wunused-parameter -Wsign-compare -Wtype-limits -Wuninitialized -pthread -fopenmp -O3 -fopenmp -MD -MT CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o -MF CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o.d -o CMakeFiles/scaluq.dir/src/circuit/circuit.cpp.o -c /home/gandalfr/scaluq/src/circuit/circuit.cpp
In file included from /home/gandalfr/scaluq/include/scaluq/circuit/circuit.hpp:6,
                 from /home/gandalfr/scaluq/src/circuit/circuit.cpp:1:
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:127:1:   required from here
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >(const scaluq::Json&)’
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]’:
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:127:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>]
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Default>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp: In instantiation of ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’:
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:129:1:   required from here
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83: error: no matching function for call to ‘get_from_json<scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >(const scaluq::Json&)’
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note: candidate: ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&)’
  229 | inline std::shared_ptr<const T> get_from_json(const Json&);
      |                                 ^~~~~~~~~~~~~
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note:   template argument deduction/substitution failed:
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:229:33: note: constraints not satisfied
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp: In substitution of ‘template<class T>  requires  GateImpl<T> std::shared_ptr<const _Tp> scaluq::internal::get_from_json(const scaluq::Json&) [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]’:
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83:   required from ‘void scaluq::internal::from_json(const scaluq::Json&, GatePtr<GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&)’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/detail/conversions/from_json.hpp:478:25:   required from ‘decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) nlohmann::json_abi_v3_11_3::detail::from_json_fn::operator()(const BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>; T = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >&; decltype (nlohmann::json_abi_v3_11_3::detail::from_json(j, forward<T>(val))) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/adl_serializer.hpp:31:30:   required from ‘static decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) nlohmann::json_abi_v3_11_3::adl_serializer<T, SFINAE>::from_json(BasicJsonType&&, TargetType&) [with BasicJsonType = const nlohmann::json_abi_v3_11_3::basic_json<>&; TargetType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; <template-parameter-1-2> = void; decltype ((nlohmann::json_abi_v3_11_3::from_json(forward<BasicJsonType>(j), val), void())) = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1610:45:   required from ‘ValueType nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get_impl(nlohmann::json_abi_v3_11_3::detail::priority_tag<0>) const [with ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; typename std::enable_if<(nlohmann::json_abi_v3_11_3::detail::is_default_constructible<ValueType>::value && nlohmann::json_abi_v3_11_3::detail::has_from_json<nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>, ValueType>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void]’
/home/gandalfr/scaluq/build/_deps/json-src/include/nlohmann/json.hpp:1753:35:   required from ‘constexpr decltype (declval<const nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) nlohmann::json_abi_v3_11_3::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType, CustomBaseClass>::get() const [with ValueTypeCV = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ValueType = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_3::adl_serializer; BinaryType = std::vector<unsigned char>; CustomBaseClass = void; decltype (declval<const basic_json_t&>().get_impl<ValueType>(nlohmann::json_abi_v3_11_3::detail::priority_tag<4>{})) = scaluq::internal::GatePtr<scaluq::internal::GateBase<scaluq::Precision::F64, scaluq::ExecutionSpace::Host> >; basic_json_t = nlohmann::json_abi_v3_11_3::basic_json<>]’
/home/gandalfr/scaluq/include/scaluq/gate/param_gate_probablistic.hpp:129:1:   required from here
/usr/include/c++/13/concepts:67:13:   required for the satisfaction of ‘derived_from<T, scaluq::internal::GateBase<T::Prec, T::Space> >’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:226:9:   required for the satisfaction of ‘GateImpl<T>’ [with T = scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>]
/home/gandalfr/scaluq/include/scaluq/circuit/../gate/gate.hpp:324:83: error: incomplete type ‘scaluq::internal::PauliGateImpl<scaluq::Precision::F64, scaluq::ExecutionSpace::Host>’ used in nested name specifier
  324 |         else if (type == "Pauli") gate = get_from_json<PauliGateImpl<Prec, Space>>(j);
      |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
[11/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/gate_matrix.cpp.o
[12/16] Building CXX object exe/CMakeFiles/main.dir/main.cpp.o
/home/gandalfr/scaluq/exe/main.cpp: In function ‘scaluq::Gate<scaluq::Precision::F64, scaluq::ExecutionSpace::Default> get_Uw(uint64_t, uint64_t)’:
/home/gandalfr/scaluq/exe/main.cpp:13:23: warning: comparison of integer expressions of different signedness: ‘int’ and ‘uint64_t’ {aka ‘long unsigned int’} [-Wsign-compare]
   13 |     for (int i = 0; i < n_qubits; ++i) {
      |                     ~~^~~~~~~~~~
/home/gandalfr/scaluq/exe/main.cpp: In function ‘int main()’:
/home/gandalfr/scaluq/exe/main.cpp:32:27: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const uint64_t’ {aka ‘const long unsigned int’} [-Wsign-compare]
   32 |         for (int i = 0; i < n_qubits; ++i) Loop.add_gate(gate::H<F64, GPU>(i));
      |                         ~~^~~~~~~~~~
/home/gandalfr/scaluq/exe/main.cpp:34:27: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const uint64_t’ {aka ‘const long unsigned int’} [-Wsign-compare]
   34 |         for (int i = 0; i < n_qubits; ++i) {
      |                         ~~^~~~~~~~~~
/home/gandalfr/scaluq/exe/main.cpp:39:27: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const uint64_t’ {aka ‘const long unsigned int’} [-Wsign-compare]
   39 |         for (int i = 0; i < n_qubits; ++i) Loop.add_gate(gate::H<F64, GPU>(i));
      |                         ~~^~~~~~~~~~
/home/gandalfr/scaluq/exe/main.cpp:44:27: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const uint64_t’ {aka ‘const long unsigned int’} [-Wsign-compare]
   44 |         for (int i = 0; i < n_qubits; ++i) Grover.add_gate(gate::H<F64, GPU>(i));
      |                         ~~^~~~~~~~~~
/home/gandalfr/scaluq/exe/main.cpp:45:27: warning: comparison of integer expressions of different signedness: ‘int’ and ‘uint64_t’ {aka ‘long unsigned int’} [-Wsign-compare]
   45 |         for (int i = 0; i < loop_max; ++i) Grover.add_circuit(Loop);
      |                         ~~^~~~~~~~~~
[13/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/gate_standard.cpp.o
[14/16] Building CXX object CMakeFiles/scaluq.dir/src/gate/merge_gate.cpp.o
ninja: build stopped: subcommand failed.
